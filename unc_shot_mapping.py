# -*- coding: utf-8 -*-
"""UNC_Shot_Mapping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HawAxpDA7YBAAJNmQnChyT-TJqc3XN8d

Imports
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""Read in and Adjust Data"""

## Read in Data to Pandas Data Frame
unc_shot_df = pd.read_csv('/content/unc-shot-data.csv')

## The Data is from 2014-2015 season to the 2017-2018 season. So, the three point line changes for the 2019-2020 season do not matter

## Look for all shots that were taken on the 'right' basket and flip their coordinates so they match up with shots on the 'left' basket
unc_shot_df.loc[unc_shot_df['team_basket'] == "right","event_coord_x"] = abs(1128-unc_shot_df["event_coord_x"])
unc_shot_df.loc[unc_shot_df['team_basket'] == "right","event_coord_y"] = abs(600-unc_shot_df["event_coord_y"])

"""Shot Location Density Plot"""

## Plot
cmap = plt.cm.Blues_r
joint_shot_chart = sns.jointplot(unc_shot_df['event_coord_y'], unc_shot_df['event_coord_x'], stat_func=None, kind='kde', space=0, color=cmap(0.1), cmap=cmap, n_levels=50)
joint_shot_chart.fig.set_size_inches(12,11)
ax = joint_shot_chart.ax_joint
draw_court(ax,color='white')
# Get rid of axis labels and tick marks
ax.set_xlabel('')
ax.set_ylabel('')
ax.tick_params(labelbottom='off', labelleft='off')


# Add Data Scource
ax.text(600,600,'Data Source: NCAA Basketball/Google Cloud',fontsize=12)

# Descending values along the axis from left to right
ax.set_xlim(600,0)
ax.set_ylim(564,0)

plt.show()

"""Makes and Misses Plot"""

scatter_plot = sns.scatterplot(x=unc_shot_df['event_coord_y'],y=unc_shot_df['event_coord_x'],hue=unc_shot_df['shot_made'],hue_order=[True,False])
draw_court()
# Get rid of axis labels and tick marks
plt.xlabel('')
plt.ylabel('')
plt.xlim(600,0)
plt.ylim(564,0)
plt.show

"""Draw Basketball Court"""

from matplotlib.patches import Circle, Rectangle, Arc

def draw_court(ax=None, color='black', lw=2):
    # If an axes object isn't provided to plot onto, just get current one
    if ax is None:
        ax = plt.gca()

    # Create the various parts of an NBA basketball court

    # Create the basketball hoop
    # Diameter of a hoop is 18" so it has a radius of 9", which is a value
    # 7.5 in our coordinate system
    hoop = Circle((300, 55.5), radius=7.5, linewidth=lw, color=color, fill=False)

    # Create backboard
    backboard = Rectangle((264, 48), 72, -1, linewidth=lw, color=color)

    # The paint
    # Create the outer box 0f the paint, width=16ft, height=19ft
    #outer_box = Rectangle((-80, -47.5), 160, 190, linewidth=lw, color=color,fill=False)
    # Create the inner box of the paint, widt=12ft, height=19ft
    inner_box = Rectangle((228, 0), 144, 228, linewidth=lw, color=color,fill=False)

    # Create free throw top arc
    top_free_throw = Arc((300, 228), 144, 144, theta1=0, theta2=180,
                         linewidth=lw, color=color, fill=False)
    # # Create free throw bottom arc
    # bottom_free_throw = Arc((0, 142.5), 120, 120, theta1=180, theta2=0,
    #                         linewidth=lw, color=color, linestyle='dashed')
    # Restricted Zone, it is an arc with 4ft radius from center of the hoop
    restricted = Arc((300, 55.5), 72, 72, theta1=0, theta2=180, linewidth=lw, color=color,linestyle = 'dashed')

    # Three point line
    # Create the side 3pt lines, they are ~4.5 ft long before they begin to arc
    corner_three_a = Rectangle((51, 0), 0, 55.5, linewidth=lw,color=color)
    corner_three_b = Rectangle((549, 0), 0, 55.5, linewidth=lw, color=color)
    # 3pt arc - center of arc will be the hoop, arc is 20'9" away from hoop
    # I just played around with the theta values until they lined up with the 
    # threes
    three_arc = Arc((300, 55.5), 498, 498, theta1=0, theta2=180, linewidth=lw,color=color)

    # # Center Court
    center_outer_arc = Arc((300, 564), 144, 144, theta1=180, theta2=0,linewidth=lw, color=color)
    center_inner_arc = Arc((300, 564), 48, 48, theta1=180, theta2=0,linewidth=lw, color=color)

    # # List of the court elements to be plotted onto the axes
    court_elements = [hoop,backboard,inner_box,top_free_throw,restricted,corner_three_a,corner_three_b,three_arc,center_outer_arc,center_inner_arc]
    
    # Add the court elements onto the axes
    for element in court_elements:
        ax.add_patch(element)

    return ax